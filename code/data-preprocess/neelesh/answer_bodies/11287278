<p>The column names (which are strings) cannot be sliced in the manner you tried.</p>

<p>Here you have a couple of options. If you know from context which variables you want to slice out, you can just return a view of only those columns by passing a list into the <code>__getitem__</code> syntax (the []'s).</p>

<pre><code>df1 = df[['a','b']]
</code></pre>

<p>Alternatively, if it matters to index them numerically and not by their name (say your code should automatically do this without knowing the names of the first two columns) then you can do this instead:</p>

<pre><code>df1 = df.iloc[:,0:2] # Remember that Python does not slice inclusive of the ending index.
</code></pre>

<p>Additionally, you should familiarize yourself with the idea of a view into a Pandas object vs. a copy of that object. The first of the above methods will return a new copy in memory of the desired sub-object (the desired slices). </p>

<p>Sometimes, however, there are indexing conventions in Pandas that don't do this and instead give you a new variable that just refers to the same chunk of memory as the sub-object or slice in the original object. This will happen with the second way of indexing, so you can modify it with the <code>copy()</code> function to get a regular copy. When this happens, changing what you think is the sliced object can sometimes alter the original object. Always good to be on the look out for this.</p>

<pre><code>df1 = df.iloc[0,0:2].copy() # To avoid the case where changing df1 also changes df
</code></pre>
